"use strict";!function(){$(function(){$.each($(".art"),function(){new CategoryChangeContent($(this))}),$.each($(".single-photos-slider__sizes"),function(){new DropDown($(this))})})}();var CategoryChangeContent=function(e){var t,i,s=this,n=e,a=new XMLHttpRequest,o=$(window),r=$(window).height(),c=$("body"),d=!0,l=!1,_=n.find(".multi-photos-slider"),f=n.find(".single-photos-slider"),h=f.find(".single-photos-slider__like"),u=n.find(".categories"),v=n.find(".categories__set"),p=n.find(".art__sliders"),g=u.find(".categories__btn"),m=u.find(".categories__name"),C=u.find(".categories__set"),w=$(".site__loading"),x=function(){g.on({click:function(){var e=$(this),t=e.data("id");return w.addClass("show"),E(t),!1}}),u.on("click",".categories__set-item",function(){var e=$(this),i=e.data("slider"),s=n.find(".categories__set-active");return e.hasClass("active")||(u.find(".categories__set-item").removeClass("active"),e.addClass("active"),t.slideTo(i,500)),s.text($(this).text()),s.removeClass("opened"),!1}),o.on({resize:function(){S(_),o.width()<768&&!v.hasClass("categories__set_minimize")?b():o.width()>=768&&!v.hasClass("categories__set_minimize")&&D()},load:function(){setTimeout(function(){S(_)},1),v.hasClass("categories__set_minimize")&&b(),o.width()<768&&!v.hasClass("categories__set_minimize")&&b()}}),n.on("click",".single-photos-slider__like",function(){for(var e,t=$(this),i=t.data("id"),s=t.attr("class").split(" "),n=0;n<s.length;n++)"liked"==s[n]&&(e=s[n]);return B(t,i,e),!1}),c.on({click:function(){var e=v.find(".categories__set-active");e.hasClass("opened")&&e.removeClass("opened")}}),v.on("click",".categories__set-active",function(){var e=$(this);return e.hasClass("opened")?e.removeClass("opened"):(e.addClass("opened"),k(v.find(".categories__set-drop-down"))),!1})},k=function(e){var t=e,i=t.find("div"),s=i.outerHeight(),n=t.css("max-height");s>parseInt(n)&&t.niceScroll({horizrailenabled:!1})},z=function(){u.on("click",".categories__btn",function(){var e=$(this),t=e.data("id");return w.addClass("show"),E(t),!1}),u.on("click",".categories__set-item",function(){var e=$(this),i=e.data("slider"),s=n.find(".categories__set-active");return e.hasClass("active")||(u.find(".categories__set-item").removeClass("active"),e.addClass("active"),t.slideTo(i,500)),s.text($(this).text()),s.removeClass("opened"),!1}),o.on({resize:function(){S(n.find(".multi-photos-slider")),o.width()<768&&!v.hasClass("categories__set_minimize")?b():o.width()>=768&&!v.hasClass("categories__set_minimize")&&D()}}),u.on("click",".categories__set-item",function(){var e=$(this),i=e.data("slider"),s=n.find(".categories__set-active");return e.hasClass("active")||(u.find(".categories__set-item").removeClass("active"),e.addClass("active"),t.slideTo(i,500)),s.text($(this).text()),s.removeClass("opened"),!1}),h.on({click:function(){for(var e,t=$(this),i=t.data("id"),s=t.attr("class").split(" "),n=0;n<s.length;n++)"liked"==s[n]&&(e=s[n]);return B(t,i,e),!1}})},b=function(){d&&(d=!1,v.find(".categories__set-item").wrapAll('<div class="categories__set-drop-down"><div></div></div>'),v.prepend('<span class="categories__set-active">Landscape</span>'),v.find(".categories__set-active").text(v.find(".categories__set-item").filter(".active").text()),l=!0)},T=function(){n[0].obj=s,y(_,f),P(_),x(),v.hasClass("categories__set_minimize")&&b(),o.width()<768&&!v.hasClass("categories__set_minimize")&&b()},y=function(e,s){t=new Swiper(e,{direction:"vertical",slidesPerView:1,paginationClickable:!0,spaceBetween:27,mousewheelControl:!0,onSlideChangeEnd:function(e){u.find(".categories__set-item").removeClass("active"),u.find(".categories__set-item").filter("[data-slider = "+e.activeIndex+"]").addClass("active"),u.find(".categories__set-active").text(u.find(".categories__set-item").filter(".active").text()),$(".single-photos-slider__sizes-selected").removeClass("active")}}),i=new Swiper(s,{nextButton:".swiper-button-next",prevButton:".swiper-button-prev",spaceBetween:30,onSlideChangeEnd:function(){$(".single-photos-slider__sizes-selected").removeClass("active")}})},E=function(e){a.abort(),a=$.ajax({url:u.data("action"),dataType:"json",timeout:2e4,data:"data-id="+e,type:"GET",success:function(t){m.html(""),C.html(""),m.append('<a href="#" class="categories__btn" data-id="'+t.id+'">'+t.btn+"</a>");for(var i=0;i<t.set.length;i++)C.html(function(){$(this).append('<a href="#" class="categories__set-item" data-slider="'+i+'">'+t.set[i]+"</a>")});j(e)},error:function(e){"abort"!=e.statusText&&alert("Error!")}})},j=function(e){a.abort(),a=$.ajax({url:p.data("action"),dataType:"html",timeout:2e4,data:"data-id="+e,type:"GET",success:function(e){d=!0,l=!1,p.html(""),p.append($(e)),setTimeout(function(){y(n.find(".multi-photos-slider"),n.find(".single-photos-slider")),S(n.find(".multi-photos-slider"))},1),z(),o.width()<768&&!v.hasClass("categories__set_minimize")&&b(),$.each($(".single-photos-slider__sizes"),function(){new DropDown($(this))}),new Popup($(".popup")).show(n.find(".single-photos-slider__zoom")),setTimeout(function(){w.removeClass("show")},500)},error:function(e){"abort"!=e.statusText&&alert("Error!")}})},B=function(e,t,i){a.abort(),a=$.ajax({url:e.data("action"),dataType:"json",timeout:2e4,data:{"data-id":t,"class":i},type:"GET",success:function(t){t.like?e.removeClass("liked"):e.addClass("liked")},error:function(e){"abort"!=e.statusText&&alert("Error!")}})},D=function(){if(l){var e=v.find(".categories__set-drop-down div").html();l=!1,v.find(".categories__set-drop-down").remove(),v.find(".categories__set-active").remove(),v.append(e),d=!0}},P=function(e){e.innerHeight(r-e.offset().top)},S=function(e){r=$(window).height(),P(e),t.update()};T()},DropDown=function(e){var t=this,i=e,s=i.find(".single-photos-slider__sizes-selected"),n=i.find(".single-photos-slider__drop"),a=i.find(".single-photos-slider__count"),o=n.find("a"),r=$(window),c=$("body"),d=function(){s.on({click:function(){l($(this))}}),i.on({click:function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}}),o.on({click:function(){var e=$(this),t=e.text(),i=e.parents(".single-photos-slider__sizes").find(".single-photos-slider__sizes-selected");return s.removeClass("active"),o.removeClass("active"),e.addClass("active"),i.text(t),_(e.index()+1),!1}}),r.on({resize:function(){s.removeClass("active")}}),c.on({click:function(){s.removeClass("active")}})},l=function(e){var t=e;t.hasClass("active")?t.removeClass("active"):t.addClass("active")},_=function(e){a.find("span:first-child").text(e),a.find("span:last-child").text(o.length)},f=function(){i[0].obj=t,d(),_(o.filter(".active").index()+1)};t.addEventsAfterAjax=function(){s.on({click:function(){l($(this))}}),i.on({click:function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}}),o.on({click:function(){var e=$(this),t=e.text(),i=e.parents(".single-photos-slider__sizes").find(".single-photos-slider__sizes-selected");s.removeClass("active"),o.removeClass("active"),e.addClass("active"),i.text(t),_(e.index()+1)}})},f()};
//# sourceMappingURL=data:application/json;base64,
