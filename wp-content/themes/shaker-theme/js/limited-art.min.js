"use strict";!function(){$(function(){$.each($(".art"),function(){new e($(this))}),$.each($(".single-photos-slider__sizes"),function(){new t($(this))})});var e=function(e){var i,s,n=this,a=e,o=new XMLHttpRequest,c=$(window),r=$(window).height(),d=$("body"),l=!0,_=!1,f=a.find(".multi-photos-slider"),u=a.find(".single-photos-slider"),h=u.find(".single-photos-slider__like"),v=a.find(".categories"),p=a.find(".categories__set"),g=a.find(".art__sliders"),m=v.find(".categories__btn"),C=v.find(".categories__name"),w=v.find(".categories__set"),x=$(".site__loading"),k=function(){m.on({click:function(){var e=$(this),t=e.data("id");return x.addClass("show"),j(t),!1}}),v.on("click",".categories__set-item",function(){var e=$(this),t=e.data("slider"),s=a.find(".categories__set-active");return e.hasClass("active")||(v.find(".categories__set-item").removeClass("active"),e.addClass("active"),i.slideTo(t,500)),s.text($(this).text()),s.removeClass("opened"),!1}),c.on({resize:function(){A(f),c.width()<768&&!p.hasClass("categories__set_minimize")?z():c.width()>=768&&!p.hasClass("categories__set_minimize")&&P()},load:function(){setTimeout(function(){A(f)},1),p.hasClass("categories__set_minimize")&&z(),c.width()<768&&!p.hasClass("categories__set_minimize")&&z()}}),a.on("click",".single-photos-slider__like",function(){for(var e,t=$(this),i=t.data("id"),s=t.attr("class").split(" "),n=0;n<s.length;n++)"liked"==s[n]&&(e=s[n]);return B(t,i,e),!1}),d.on({click:function(){var e=p.find(".categories__set-active");e.hasClass("opened")&&e.removeClass("opened")}})},b=function(){v.on("click",".categories__btn",function(){var e=$(this),t=e.data("id");return x.addClass("show"),j(t),!1}),v.on("click",".categories__set-item",function(){var e=$(this),t=e.data("slider"),s=a.find(".categories__set-active");return e.hasClass("active")||(v.find(".categories__set-item").removeClass("active"),e.addClass("active"),i.slideTo(t,500)),s.text($(this).text()),s.removeClass("opened"),!1}),c.on({resize:function(){A(a.find(".multi-photos-slider")),c.width()<768&&!p.hasClass("categories__set_minimize")?z():c.width()>=768&&!p.hasClass("categories__set_minimize")&&P()}}),v.on("click",".categories__set-item",function(){var e=$(this),t=e.data("slider"),s=a.find(".categories__set-active");return e.hasClass("active")||(v.find(".categories__set-item").removeClass("active"),e.addClass("active"),i.slideTo(t,500)),s.text($(this).text()),s.removeClass("opened"),!1}),h.on({click:function(){for(var e,t=$(this),i=t.data("id"),s=t.attr("class").split(" "),n=0;n<s.length;n++)"liked"==s[n]&&(e=s[n]);return B(t,i,e),!1}})},z=function(){l&&(l=!1,p.find(".categories__set-item").wrapAll('<div class="categories__set-drop-down"><div></div></div>'),p.prepend('<span class="categories__set-active">Landscape</span>'),p.find(".categories__set-active").text(p.find(".categories__set-item").filter(".active").text()),_=!0)},T=function(){a[0].obj=n,E(f,u),S(f),k()},E=function(e,t){i=new Swiper(e,{direction:"vertical",slidesPerView:1,paginationClickable:!0,spaceBetween:27,mousewheelControl:!0,onSlideChangeEnd:function(e){v.find(".categories__set-item").removeClass("active"),v.find(".categories__set-item").filter("[data-slider = "+e.activeIndex+"]").addClass("active"),v.find(".categories__set-active").text(v.find(".categories__set-item").filter(".active").text()),$(".single-photos-slider__sizes-selected").removeClass("active")}}),s=new Swiper(t,{nextButton:".swiper-button-next",prevButton:".swiper-button-prev",spaceBetween:30,onSlideChangeEnd:function(){$(".single-photos-slider__sizes-selected").removeClass("active")}})},j=function(e){o.abort(),o=$.ajax({url:v.data("action"),dataType:"json",timeout:2e4,data:"data-id="+e,type:"GET",success:function(t){C.html(""),w.html(""),C.append('<a href="#" class="categories__btn" data-id="'+t.id+'">'+t.btn+"</a>");for(var i=0;i<t.set.length;i++)w.html(function(){$(this).append('<a href="#" class="categories__set-item" data-slider="'+i+'">'+t.set[i]+"</a>")});y(e)},error:function(e){"abort"!=e.statusText&&alert("Error!")}})},y=function(e){o.abort(),o=$.ajax({url:g.data("action"),dataType:"html",timeout:2e4,data:"data-id="+e,type:"GET",success:function(e){l=!0,_=!1,g.html(""),g.append($(e)),setTimeout(function(){E(a.find(".multi-photos-slider"),a.find(".single-photos-slider")),A(a.find(".multi-photos-slider"))},1),b(),c.width()<768&&!p.hasClass("categories__set_minimize")&&z(),$.each($(".single-photos-slider__sizes"),function(){new t($(this))}),new Popup($(".popup")).show(a.find(".single-photos-slider__zoom")),setTimeout(function(){x.removeClass("show")},500)},error:function(e){"abort"!=e.statusText&&alert("Error!")}})},B=function(e,t,i){o.abort(),o=$.ajax({url:e.data("action"),dataType:"json",timeout:2e4,data:{"data-id":t,"class":i},type:"GET",success:function(t){t.like?e.removeClass("liked"):e.addClass("liked")},error:function(e){"abort"!=e.statusText&&alert("Error!")}})},P=function(){if(_){var e=p.find(".categories__set-drop-down div").html();_=!1,p.find(".categories__set-drop-down").remove(),p.find(".categories__set-active").remove(),p.append(e),l=!0}},S=function(e){e.innerHeight(r-e.offset().top)},A=function(e){r=$(window).height(),S(e),i.update()};T()},t=function(e){var t=this,i=e,s=i.find(".single-photos-slider__sizes-selected"),n=i.find(".single-photos-slider__drop"),a=i.find(".single-photos-slider__count"),o=n.find("a"),c=$(window),r=($("body"),function(){s.on({click:function(){d($(this))}}),i.on({click:function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}}),o.on({click:function(){var e=$(this),t=e.text(),i=e.parents(".single-photos-slider__sizes").find(".single-photos-slider__sizes-selected");s.removeClass("active"),o.removeClass("active"),e.addClass("active"),i.text(t),l(e.index()+1)}}),c.on({resize:function(){s.removeClass("active")}})}),d=function(e){var t=e;t.hasClass("active")?t.removeClass("active"):t.addClass("active")},l=function(e){a.find("span:first-child").text(e),a.find("span:last-child").text(o.length)},_=function(){i[0].obj=t,r(),l(o.filter(".active").index()+1)};t.addEventsAfterAjax=function(){s.on({click:function(){d($(this))}}),i.on({click:function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}}),o.on({click:function(){var e=$(this),t=e.text(),i=e.parents(".single-photos-slider__sizes").find(".single-photos-slider__sizes-selected");s.removeClass("active"),o.removeClass("active"),e.addClass("active"),i.text(t),l(e.index()+1)}})},_()}}();
//# sourceMappingURL=data:application/json;base64,
