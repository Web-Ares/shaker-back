"use strict";!function(){$(function(){$.each($(".site__menu"),function(){new e($(this))}),$.each($(".full-height"),function(){new t($(this))}),$.each($(".site_ajax"),function(){new n($(this))})});var t=function(t){var e=this,n=t,i=$(window),o=function(){i.on({resize:function(){a()}})},s=function(){n[0].obj=e,o(),a()},a=function(){i.height()>=550?n.css({"min-height":i.height()}):n.css({"min-height":"550px"})};s(),e.setHeight=function(){a()}},e=function(t){var e=this,n=t,i=$("body"),o=n.find(".site__menu-btn"),s=n.find(".site__menu-link"),a=function(){o.on({click:function(){c($(this))}}),s.on({click:function(){l()}})},u=function(){n[0].obj=e,a()},c=function(t){var e=t;e.hasClass("opened")?e.removeClass("opened"):e.addClass("opened")},l=function(){o.removeClass("opened")};u(),e.addEvents=function(){i.find(".site__menu-btn").on(),i.find(".site__menu-link").on()}},n=function(n){var i,o=this,s=n,a=$(window),u=new XMLHttpRequest,c=null,l=!0,r=!1,f=null,_=500,d=$("html, body"),h=$(".site__layout"),m=h.data("scroll"),v=$("body"),g=$(".site__loading"),p=function(){$("body").on("click",".site__down-link",function(){return l&&S($(this),$(this).parents(".site__layout")),!1}),s.on("click",".site__menu-nav_ajax .site__menu-link",function(){return l&&S($(this),$("body").find(".site__layout")),!1}),window.addEventListener("popstate",function(t){var e=c;if(null==t.state){f=$(".site__layout");var n=$(JSON.parse(sessionStorage.getItem("index")).content);n.addClass("site__content_absolute"),g.addClass("show"),setTimeout(function(){w(n)},200)}else c="php/"+t.state.foo+".php",e!=c&&(f=$(".site__layout"),y())},!1),a.on({resize:function(){C(v.find(".site__layout"))},scroll:function(){C(v.find(".site__layout"))},DOMMouseScroll:function(t){var e=t.originalEvent.detail;if(e){var n=e>0?1:-1;T(n)}},mousewheel:function(t){var e=t.originalEvent.wheelDelta;if(e){var n=e>0?-1:1;T(n)}},touchmove:function(t){var e=t.originalEvent.touches[0].clientY;e>i?T(-1):i>e&&T(1),i=e}})},w=function(n){m=n.data("scroll"),f.addClass("site__content_top"),s.append(n),n.addClass("site__content_from-bottom"),setTimeout(function(){n.removeClass("site__content_from-bottom"),n.removeClass("site__content_absolute"),d.stop(!0,!1),d.animate({scrollTop:0},300),new t(n.find(".full-height")).setHeight(),g.removeClass("show")},500),setTimeout(function(){l=!0,C(v.find(".site__layout"))},1e3),setTimeout(function(){f.remove(),new e(n.find(".site__menu")).addEvents()},_)},y=function(){var t,e,n="sessionStorage"in window&&window.sessionStorage,i=/[^\/]*$/.exec(c)[0],o=i.split("."),s=o[0],a=!1;try{n&&(a=sessionStorage.getItem(s),a&&(a=JSON.parse(a),t=new Date,e=new Date(a.timestamp),e.setMinutes(e.getMinutes()+10),t.getTime()>e.getTime()&&(a=!1,sessionStorage.removeItem(s))))}catch(l){a=!1}if(a){var r=$(a.content);r.addClass("site__content_absolute"),g.addClass("show"),setTimeout(function(){w(r)},200)}else u.abort(),u=$.ajax({url:c,dataType:"html",timeout:2e4,type:"GET",success:function(t){if(n)try{sessionStorage.setItem(s,JSON.stringify({timestamp:new Date,content:t}))}catch(e){}var i=$(t);i.addClass("site__content_absolute"),g.addClass("show"),setTimeout(function(){w(i)},200)},error:function(t){"abort"!=t.statusText&&alert("Error!")}});return!1},b=function(){r=a.height()>=h.innerHeight()&&!(0==m)},C=function(t){r=a.scrollTop()+a.height()>=t.innerHeight()&&!(0==m)},S=function(t,e){l=!1,r=!1,c=t.data("href"),f=e,y();var n=/[^\/]*$/.exec(c)[0],i=n.split(".");n=i[0],history.pushState({foo:n},null,n+".html")},T=function(t){t>0&&r&&S(v.find(".site__layout"),v.find(".site__layout"))},x=function(){sessionStorage.setItem("index",JSON.stringify({timestamp:new Date,content:s.html()}))},k=function(){s[0].obj=o,p(),b(),x()};k()}}();
!function(){$(function(){$(".popup").each(function(){new Popup($(this))})})}();var Popup=function(o){var n=this,t=40,i=$(".popup__open"),p=o,e=p.find(".popup__lightbox"),c=p.find(".popup__close, .popup__cancel"),u=p.find(".popup__wrap"),s=p.find(".popup__content"),a=$("html"),d=$(window),r=setTimeout(function(){},1),f=function(){d.height()-2*t-u.height()>0?u.css({top:(d.height()-2*t-u.height())/2}):u.css({top:0})},h=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},l=function(){p.css({overflowY:"hidden"}),a.css({overflowY:"auto",paddingRight:0}),p.removeClass("popup_opened"),p.addClass("popup_hide"),r=setTimeout(function(){p.css({overflowY:"auto"}),p.removeClass("popup_hide")},300)},g=function(){p[0].obj=n,_()},_=function(){d.on({resize:function(){f()}}),i.on({click:function(){if(m($(this).attr("data-popup")),"lightbox"==$(this).attr("data-popup")){var o=$(this).parent(),n=o.css("background-image");e.css({"background-image":n})}return!1}}),u.on({click:function(o){o.stopPropagation()}}),p.on({click:function(){return l(),!1}}),c.on({click:function(){return l(),!1}})},m=function(o){v(o),a.css({overflowY:"hidden",paddingRight:h()}),p.addClass("popup_opened"),f()},v=function(o){var n=s.filter(".popup__"+o);s.css({display:"none"}),n.css({display:"block"})};n.show=function(o){o.on({click:function(){if(m($(this).attr("data-popup")),"lightbox"==$(this).attr("data-popup")){var o=$(this).parent(),n=o.css("background-image");e.css({"background-image":n})}return!1}})},g()};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5tYWluLmpzIiwianF1ZXJ5LnBvcHVwLmpzIl0sIm5hbWVzIjpbIiQiLCJlYWNoIiwiTWVudSIsInRoaXMiLCJGdWxsSGVpZ2h0U2NyZWVuIiwiUGFnZSIsIm9iaiIsIl9zZWxmIiwiX29iaiIsIl93aW5kb3ciLCJ3aW5kb3ciLCJfb25FdmVudHMiLCJvbiIsInJlc2l6ZSIsIl9zZXRIZWlnaHQiLCJfaW5pdCIsImhlaWdodCIsImNzcyIsIm1pbi1oZWlnaHQiLCJzZXRIZWlnaHQiLCJfYm9keSIsIl9zaG93QnRuIiwiZmluZCIsIl9saW5rcyIsIl9hZGRFdmVudHMiLCJjbGljayIsIl9vcGVuTWVudSIsIl9yZXNldFN0eWxlIiwiZWxlbSIsImN1ckl0ZW0iLCJoYXNDbGFzcyIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJhZGRFdmVudHMiLCJfbGFzdFBvcyIsIl9yZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJfcGF0aCIsIl9hY3Rpb25DbGljayIsIl9hY3Rpb25TY3JvbGwiLCJfd3JhcHBlciIsIl9kdXJhdGlvbiIsIl9kb20iLCJfY29udGVudCIsIl9kYXRhU2Nyb2xsIiwiZGF0YSIsIl9sb2FkaW5nIiwiX2NoYW5nZUNvbnRlbnQiLCJwYXJlbnRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJvbGRQYXRoIiwic3RhdGUiLCJuZXdXcmFwcGVyIiwiSlNPTiIsInBhcnNlIiwic2Vzc2lvblN0b3JhZ2UiLCJnZXRJdGVtIiwiY29udGVudCIsInNldFRpbWVvdXQiLCJfYWRkQ29udGVudCIsImZvbyIsIl9yZXF1ZXN0Rm9yQ29udGVudCIsIl9jaGVja0FjdGlvblNjcm9sbCIsInNjcm9sbCIsIkRPTU1vdXNlU2Nyb2xsIiwiZGVsdGEiLCJvcmlnaW5hbEV2ZW50IiwiZGV0YWlsIiwiZGlyZWN0aW9uIiwiX2NoZWNrU2Nyb2xsIiwibW91c2V3aGVlbCIsIndoZWVsRGVsdGEiLCJ0b3VjaG1vdmUiLCJjdXJyZW50UG9zIiwidG91Y2hlcyIsImNsaWVudFkiLCJhcHBlbmQiLCJzdG9wIiwiYW5pbWF0ZSIsInNjcm9sbFRvcCIsInJlbW92ZSIsIm5vdyIsImV4cGlyYXRpb24iLCJoYXNTdG9yYWdlIiwicGF0aCIsImV4ZWMiLCJwYXRoU3BsaXQiLCJzcGxpdCIsInN0b3JhZ2VLZXkiLCJEYXRlIiwidGltZXN0YW1wIiwic2V0TWludXRlcyIsImdldE1pbnV0ZXMiLCJnZXRUaW1lIiwicmVtb3ZlSXRlbSIsImFib3J0IiwiYWpheCIsInVybCIsImRhdGFUeXBlIiwidGltZW91dCIsInR5cGUiLCJzdWNjZXNzIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsImVycm9yIiwic3RhdHVzVGV4dCIsImFsZXJ0IiwiX2NoZWNrQWN0aW9uIiwiaW5uZXJIZWlnaHQiLCJlbGVtUGFyZW50IiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsIl93cml0ZUluZGV4QmxvY2tUb1Nlc3Npb25TdG9yYWdlIiwiaHRtbCIsIlBvcHVwIiwiX3BvcHVwUGFkZGluZyIsIl9idG5TaG93IiwiX2xpZ2h0Qm94UG9wdXAiLCJfYnRuQ2xvc2UiLCJfd3JhcCIsIl9jb250ZW50cyIsIl9zY3JvbGxDb250ZWluZXIiLCJfdGltZXIiLCJfY2VudGVyV3JhcCIsInRvcCIsIl9nZXRTY3JvbGxXaWR0aCIsInNjcm9sbEJhcldpZHRoIiwic2Nyb2xsRGl2IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiYm9keSIsImFwcGVuZENoaWxkIiwib2Zmc2V0V2lkdGgiLCJjbGllbnRXaWR0aCIsInJlbW92ZUNoaWxkIiwiX2hpZGUiLCJvdmVyZmxvd1kiLCJwYWRkaW5nUmlnaHQiLCJfc2hvdyIsImF0dHIiLCJwYXJlbnQiLCJwYXJlbnRCZyIsImJhY2tncm91bmQtaW1hZ2UiLCJzdG9wUHJvcGFnYXRpb24iLCJfc2V0UG9wdXBDb250ZW50IiwiY3VyQ29udGVudCIsImZpbHRlciIsImRpc3BsYXkiLCJzaG93Il0sIm1hcHBpbmdzIjoiQUFBQSxjQUNBLFdBRUlBLEVBQUcs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S2hCLElBQ0RhLE1BQU8sV0FHSCxHQUZBbUgsRUFBTzVJLEVBQUdHLE1BQU8wSSxLQUFNLGVBRWUsWUFBbEM3SSxFQUFHRyxNQUFPMEksS0FBTSxjQUErQixDQUMvQyxHQUFJQyxHQUFTOUksRUFBR0csTUFBTzJJLFNBQ25CQyxFQUFXRCxFQUFPN0gsSUFBSyxtQkFDM0JxRyxHQUFlckcsS0FDWCtILG1CQUFvQkQsSUFJNUIsT0FBTyxNQU9uQmhJIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4oIGZ1bmN0aW9uKCkge1xuXG4gICAgJCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgJC5lYWNoKCAkKCAnLnNpdGVfX21lbnUnICksIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBuZXcgTWVudSAoICQoIHRoaXMgKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoJy5mdWxsLWhlaWdodCcpLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIG5ldyBGdWxsSGVpZ2h0U2NyZWVuKCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCgnLnNpdGVfYWpheCcgKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgUGFnZSggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgIH0gKTtcblxuICAgIHZhciBGdWxsSGVpZ2h0U2NyZWVuID0gZnVuY3Rpb24gKCBvYmogKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICk7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9vbkV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcblxuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX3NldEhlaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX29ialswXS5vYmogPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfb25FdmVudHMoKTtcbiAgICAgICAgICAgICAgICBfc2V0SGVpZ2h0KCk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2V0SGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgaWYoIF93aW5kb3cuaGVpZ2h0KCkgPj0gNTUwICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF9vYmouY3NzKCB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICdtaW4taGVpZ2h0JzogX3dpbmRvdy5oZWlnaHQoKVxuXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX29iai5jc3MoIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJ21pbi1oZWlnaHQnOiAnNTUwcHgnXG5cbiAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG5cbiAgICAgICAgX3NlbGYuc2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBfc2V0SGVpZ2h0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIE1lbnUgPSBmdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX2JvZHkgPSAkKCAnYm9keScgKSxcbiAgICAgICAgICAgIF9zaG93QnRuID0gX29iai5maW5kKCAnLnNpdGVfX21lbnUtYnRuJyksXG4gICAgICAgICAgICBfbGlua3MgPSBfb2JqLmZpbmQoICcuc2l0ZV9fbWVudS1saW5rJyApO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfc2hvd0J0bi5vbigge1xuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9vcGVuTWVudSggJCggdGhpcyApICk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIF9saW5rcy5vbigge1xuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZXNldFN0eWxlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfb3Blbk1lbnUgPSBmdW5jdGlvbiggZWxlbSApICB7XG5cbiAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9IGVsZW07XG5cbiAgICAgICAgICAgICAgICBpZiggY3VySXRlbS5oYXNDbGFzcyggJ29wZW5lZCcgKSApIHtcblxuICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLnJlbW92ZUNsYXNzKCAnb3BlbmVkJyApO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLmFkZENsYXNzKCAnb3BlbmVkJyApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9yZXNldFN0eWxlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX3Nob3dCdG4ucmVtb3ZlQ2xhc3MoICdvcGVuZWQnICk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG5cbiAgICAgICAgX3NlbGYuYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX2JvZHkuZmluZCggJy5zaXRlX19tZW51LWJ0bicpLm9uKCk7XG4gICAgICAgICAgICBfYm9keS5maW5kKCAnLnNpdGVfX21lbnUtbGluaycpLm9uKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIFBhZ2UgPSBmdW5jdGlvbiAoIG9iaiApIHtcblxuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKCB3aW5kb3cgKSxcbiAgICAgICAgICAgIF9yZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCksXG4gICAgICAgICAgICBfcGF0aCA9IG51bGwsXG4gICAgICAgICAgICBfYWN0aW9uQ2xpY2sgPSB0cnVlLFxuICAgICAgICAgICAgX2FjdGlvblNjcm9sbCA9IGZhbHNlLFxuICAgICAgICAgICAgX3dyYXBwZXIgPSBudWxsLFxuICAgICAgICAgICAgX2xhc3RQb3MsXG4gICAgICAgICAgICBfZHVyYXRpb24gPSA1MDAsXG4gICAgICAgICAgICBfZG9tID0gJCggJ2h0bWwsIGJvZHknICksXG4gICAgICAgICAgICBfY29udGVudCA9ICQoICcuc2l0ZV9fbGF5b3V0JyApLFxuICAgICAgICAgICAgX2RhdGFTY3JvbGwgPSBfY29udGVudC5kYXRhKCAnc2Nyb2xsJyApLFxuICAgICAgICAgICAgX2JvZHkgPSAkKCAnYm9keScgKSxcbiAgICAgICAgICAgIF9sb2FkaW5nID0gJCggJy5zaXRlX19sb2FkaW5nJyApO1xuXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgJCggJ2JvZHknICkub24oICdjbGljaycsICcuc2l0ZV9fZG93bi1saW5rJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIF9hY3Rpb25DbGljayApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jaGFuZ2VDb250ZW50KCAkKCB0aGlzKSwgJCggdGhpcyApLnBhcmVudHMoICcuc2l0ZV9fbGF5b3V0JyApICk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBfb2JqLm9uKCAnY2xpY2snLCAnLnNpdGVfX21lbnUtbmF2X2FqYXggLnNpdGVfX21lbnUtbGluaycsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBfYWN0aW9uQ2xpY2sgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY2hhbmdlQ29udGVudCggJCggdGhpcyksICQoICdib2R5JykuZmluZCggJy5zaXRlX19sYXlvdXQnICkgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uKCBlICkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGRQYXRoID0gX3BhdGg7XG5cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIGUuc3RhdGUgPT0gbnVsbCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX3dyYXBwZXIgPSAkKCAnLnNpdGVfX2xheW91dCcgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1dyYXBwZXIgPSAkKEpTT04ucGFyc2UoIHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oICdpbmRleCcgKSApLmNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3V3JhcHBlci5hZGRDbGFzcyggJ3NpdGVfX2NvbnRlbnRfYWJzb2x1dGUnICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb2FkaW5nLmFkZENsYXNzKCAnc2hvdycgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWRkQ29udGVudCggbmV3V3JhcHBlciApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9LDIwMCApO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX3BhdGggPSAncGhwLycgKyBlLnN0YXRlLmZvbyArICcucGhwJzsgLy8gJ3BocCcgaXMgYSBmb2xkZXIgd2l0aCBmaWxlcyB3aGljaCBjb25zaXN0IGNvbnRlbnQgb2Ygc2xpZGVzLiBWYXJpYWJsZSAoJ2Uuc3RhdGUuZm9vJykgaXMgYSBuYW1lIG9mIGZpbGVcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBvbGRQYXRoICE9IF9wYXRoICl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfd3JhcHBlciA9ICQoICcuc2l0ZV9fbGF5b3V0JyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZXF1ZXN0Rm9yQ29udGVudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0sIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja0FjdGlvblNjcm9sbCggX2JvZHkuZmluZCggJy5zaXRlX19sYXlvdXQnICkgKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja0FjdGlvblNjcm9sbCggX2JvZHkuZmluZCggJy5zaXRlX19sYXlvdXQnICkgKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgRE9NTW91c2VTY3JvbGw6IGZ1bmN0aW9uKCBlICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSBlLm9yaWdpbmFsRXZlbnQuZGV0YWlsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGRlbHRhICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSAoIGRlbHRhID4gMCApID8gMSA6IC0xO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCBkaXJlY3Rpb24gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG1vdXNld2hlZWw6IGZ1bmN0aW9uKCBlICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSBlLm9yaWdpbmFsRXZlbnQud2hlZWxEZWx0YTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBkZWx0YSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gKCBkZWx0YSA+IDAgKSA/IC0xIDogMTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggZGlyZWN0aW9uICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0b3VjaG1vdmU6IGZ1bmN0aW9uKCBlICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFBvcyA9IGUub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdLmNsaWVudFk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY3VycmVudFBvcyA+IF9sYXN0UG9zICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCAtMSApO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGN1cnJlbnRQb3MgPCBfbGFzdFBvcyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggMSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9sYXN0UG9zID0gY3VycmVudFBvcztcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2FkZENvbnRlbnQgPSBmdW5jdGlvbiggbmV3V3JhcHBlciApIHtcblxuICAgICAgICAgICAgICAgIF9kYXRhU2Nyb2xsID0gbmV3V3JhcHBlci5kYXRhKCAnc2Nyb2xsJyApO1xuXG4gICAgICAgICAgICAgICAgX3dyYXBwZXIuYWRkQ2xhc3MoICdzaXRlX19jb250ZW50X3RvcCcgKTtcbiAgICAgICAgICAgICAgICBfb2JqLmFwcGVuZCggbmV3V3JhcHBlciApO1xuICAgICAgICAgICAgICAgIG5ld1dyYXBwZXIuYWRkQ2xhc3MoICdzaXRlX19jb250ZW50X2Zyb20tYm90dG9tJyApO1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgbmV3V3JhcHBlci5yZW1vdmVDbGFzcyggJ3NpdGVfX2NvbnRlbnRfZnJvbS1ib3R0b20nICk7XG4gICAgICAgICAgICAgICAgICAgIG5ld1dyYXBwZXIucmVtb3ZlQ2xhc3MoICdzaXRlX19jb250ZW50X2Fic29sdXRlJyApO1xuICAgICAgICAgICAgICAgICAgICBfZG9tLnN0b3AoIHRydWUsIGZhbHNlICk7XG4gICAgICAgICAgICAgICAgICAgIF9kb20uYW5pbWF0ZSggeyBzY3JvbGxUb3A6IDAgIH0sIDMwMCApO1xuICAgICAgICAgICAgICAgICAgICBuZXcgRnVsbEhlaWdodFNjcmVlbiggbmV3V3JhcHBlci5maW5kKCAnLmZ1bGwtaGVpZ2h0JyApICkuc2V0SGVpZ2h0KCk7XG4gICAgICAgICAgICAgICAgICAgIF9sb2FkaW5nLnJlbW92ZUNsYXNzKCAnc2hvdycgKTtcblxuICAgICAgICAgICAgICAgIH0sIDUwMCApO1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIF9hY3Rpb25DbGljayA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIF9jaGVja0FjdGlvblNjcm9sbCggX2JvZHkuZmluZCggJy5zaXRlX19sYXlvdXQnICkgKTtcbiAgICAgICAgICAgICAgICB9LCAxMDAwICk7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgX3dyYXBwZXIucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBNZW51KCBuZXdXcmFwcGVyLmZpbmQoICcuc2l0ZV9fbWVudScgKSApLmFkZEV2ZW50cygpO1xuICAgICAgICAgICAgICAgIH0sIF9kdXJhdGlvbiApO1xuXG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfcmVxdWVzdEZvckNvbnRlbnQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBoYXNTdG9yYWdlID0gKCAnc2Vzc2lvblN0b3JhZ2UnIGluIHdpbmRvdyAmJiB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UgKSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aCA9IC9bXi9dKiQvLmV4ZWMoIF9wYXRoIClbIDAgXSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aFNwbGl0ID0gcGF0aC5zcGxpdCggJy4nKSxcbiAgICAgICAgICAgICAgICAgICAgc3RvcmFnZUtleSA9IHBhdGhTcGxpdFsgMCBdLFxuICAgICAgICAgICAgICAgICAgICBub3csIGV4cGlyYXRpb24sIGRhdGEgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNTdG9yYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSggc3RvcmFnZUtleSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGRhdGEgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoIGRhdGEgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwaXJhdGlvbiA9IG5ldyBEYXRlKCBkYXRhLnRpbWVzdGFtcCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGlyYXRpb24uc2V0TWludXRlcyggZXhwaXJhdGlvbi5nZXRNaW51dGVzKCkgKyAxMCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBub3cuZ2V0VGltZSgpID4gZXhwaXJhdGlvbi5nZXRUaW1lKCkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbSggc3RvcmFnZUtleSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoIGUgKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIGRhdGEgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1dyYXBwZXIgPSAkKCBkYXRhLmNvbnRlbnQgKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3V3JhcHBlci5hZGRDbGFzcyggJ3NpdGVfX2NvbnRlbnRfYWJzb2x1dGUnICk7XG5cbiAgICAgICAgICAgICAgICAgICAgX2xvYWRpbmcuYWRkQ2xhc3MoICdzaG93JyApO1xuXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWRkQ29udGVudCggbmV3V3JhcHBlciApO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sMjAwICk7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF9yZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIF9yZXF1ZXN0ID0gJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogX3BhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2h0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogMjAwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIkdFVFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uKCBjb250ZW50ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBoYXNTdG9yYWdlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSggc3RvcmFnZUtleSwgSlNPTi5zdHJpbmdpZnkoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoIGUgKSB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdXcmFwcGVyID0gJCggY29udGVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1dyYXBwZXIuYWRkQ2xhc3MoICdzaXRlX19jb250ZW50X2Fic29sdXRlJyApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2xvYWRpbmcuYWRkQ2xhc3MoICdzaG93JyApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FkZENvbnRlbnQoIG5ld1dyYXBwZXIgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sMjAwICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICggWE1MSHR0cFJlcXVlc3QgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBYTUxIdHRwUmVxdWVzdC5zdGF0dXNUZXh0ICE9IFwiYWJvcnRcIiApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoICdFcnJvciEnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2NoZWNrQWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX2FjdGlvblNjcm9sbCA9ICggX3dpbmRvdy5oZWlnaHQoKSA+PSBfY29udGVudC5pbm5lckhlaWdodCgpICYmICEoIF9kYXRhU2Nyb2xsID09IGZhbHNlICkgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2hlY2tBY3Rpb25TY3JvbGwgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgICAgICAgICBfYWN0aW9uU2Nyb2xsID0gKCAoIF93aW5kb3cuc2Nyb2xsVG9wKCkgKyBfd2luZG93LmhlaWdodCgpICkgPj0gZWxlbS5pbm5lckhlaWdodCgpICAmJiAgISggX2RhdGFTY3JvbGwgPT0gZmFsc2UgKSApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jaGFuZ2VDb250ZW50ID0gZnVuY3Rpb24oIGVsZW0sIGVsZW1QYXJlbnQgKSB7XG5cbiAgICAgICAgICAgICAgICBfYWN0aW9uQ2xpY2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBfYWN0aW9uU2Nyb2xsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgX3BhdGggPSBlbGVtLmRhdGEoICdocmVmJyApO1xuICAgICAgICAgICAgICAgIF93cmFwcGVyID0gZWxlbVBhcmVudDtcblxuICAgICAgICAgICAgICAgIF9yZXF1ZXN0Rm9yQ29udGVudCgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHBhdGggPSAvW14vXSokLy5leGVjKCBfcGF0aCApWzBdLFxuICAgICAgICAgICAgICAgICAgICBwYXRoU3BsaXQgPSBwYXRoLnNwbGl0KCAnLicgKTtcbiAgICAgICAgICAgICAgICBwYXRoID0gcGF0aFNwbGl0WzBdO1xuXG4gICAgICAgICAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoIHsgZm9vOiBwYXRoIH0sIG51bGwsIHBhdGggKyAnLmh0bWwnICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2hlY2tTY3JvbGwgPSBmdW5jdGlvbiggZGlyZWN0aW9uICkge1xuXG4gICAgICAgICAgICAgICAgaWYoIGRpcmVjdGlvbiA+IDAgJiYgX2FjdGlvblNjcm9sbCApe1xuICAgICAgICAgICAgICAgICAgICBfY2hhbmdlQ29udGVudCggX2JvZHkuZmluZCggJy5zaXRlX19sYXlvdXQnICksIF9ib2R5LmZpbmQoICcuc2l0ZV9fbGF5b3V0JyApICk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfd3JpdGVJbmRleEJsb2NrVG9TZXNzaW9uU3RvcmFnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oICdpbmRleCcsIEpTT04uc3RyaW5naWZ5KCB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogX29iai5odG1sKClcbiAgICAgICAgICAgICAgICB9ICkgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbMF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuICAgICAgICAgICAgICAgIF9jaGVja0FjdGlvbigpO1xuICAgICAgICAgICAgICAgIF93cml0ZUluZGV4QmxvY2tUb1Nlc3Npb25TdG9yYWdlKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxufSApKCk7XG5cblxuIiwiKCBmdW5jdGlvbigpe1xuXG4gICAgJCggZnVuY3Rpb24oKXtcblxuICAgICAgICAkKCAnLnBvcHVwJyApLmVhY2goZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgbmV3IFBvcHVwKCQodGhpcykpO1xuXG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cblxufSApKCk7XG5cbnZhciBQb3B1cCA9IGZ1bmN0aW9uKCBvYmogKXtcblxuICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgX3BvcHVwUGFkZGluZyA9IDQwLFxuICAgICAgICBfYnRuU2hvdyA9ICAkKCAnLnBvcHVwX19vcGVuJyApLFxuICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICBfbGlnaHRCb3hQb3B1cCA9ICBfb2JqLmZpbmQoICcucG9wdXBfX2xpZ2h0Ym94JyApLFxuICAgICAgICBfYnRuQ2xvc2UgPSBfb2JqLmZpbmQoICcucG9wdXBfX2Nsb3NlLCAucG9wdXBfX2NhbmNlbCcgKSxcbiAgICAgICAgX3dyYXAgPSBfb2JqLmZpbmQoICcucG9wdXBfX3dyYXAnICksXG4gICAgICAgIF9jb250ZW50cyA9IF9vYmouZmluZCggJy5wb3B1cF9fY29udGVudCcgKSxcbiAgICAgICAgX3Njcm9sbENvbnRlaW5lciA9ICQoICdodG1sJyApLFxuICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXG4gICAgICAgIF90aW1lciA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCl7fSwgMSApO1xuXG4gICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICB2YXIgX2NlbnRlcldyYXAgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYgKCBfd2luZG93LmhlaWdodCgpIC0gKCBfcG9wdXBQYWRkaW5nICogMiApIC0gX3dyYXAuaGVpZ2h0KCkgPiAwICkge1xuICAgICAgICAgICAgICAgIF93cmFwLmNzcyggeyB0b3A6ICggKCBfd2luZG93LmhlaWdodCgpIC0gKCBfcG9wdXBQYWRkaW5nICogMiApICkgLSBfd3JhcC5oZWlnaHQoKSApIC8gMiB9ICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF93cmFwLmNzcyggeyB0b3A6IDAgfSApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfZ2V0U2Nyb2xsV2lkdGggPSBmdW5jdGlvbiAoKXtcbiAgICAgICAgICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyksXG4gICAgICAgICAgICAgICAgc2Nyb2xsQmFyV2lkdGg7XG5cbiAgICAgICAgICAgIHNjcm9sbERpdi5jbGFzc05hbWUgPSAncG9wdXBfX3Njcm9sbGJhci1tZWFzdXJlJztcblxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggc2Nyb2xsRGl2ICk7XG5cbiAgICAgICAgICAgIHNjcm9sbEJhcldpZHRoID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG5cbiAgICAgICAgICAgIHJldHVybiBzY3JvbGxCYXJXaWR0aDtcbiAgICAgICAgfSxcbiAgICAgICAgX2hpZGUgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgX29iai5jc3MoIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdoaWRkZW4nXG4gICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICBfc2Nyb2xsQ29udGVpbmVyLmNzcygge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodDogMFxuICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAncG9wdXBfb3BlbmVkJyApO1xuICAgICAgICAgICAgX29iai5hZGRDbGFzcyggJ3BvcHVwX2hpZGUnICk7XG5cbiAgICAgICAgICAgIF90aW1lciA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICBfb2JqLmNzcyAoe1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdhdXRvJ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcyggJ3BvcHVwX2hpZGUnICk7XG4gICAgICAgICAgICB9LCAzMDAgKTtcblxuICAgICAgICB9LFxuICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBfb2JqWyAwIF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICBfb25FdmVudHMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX29uRXZlbnRzID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIF93aW5kb3cub24oIHtcbiAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIF9jZW50ZXJXcmFwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgX2J0blNob3cub24oIHtcbiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgX3Nob3coICQoIHRoaXMgKS5hdHRyKCAnZGF0YS1wb3B1cCcgKSApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCAkKCB0aGlzICkuYXR0ciggJ2RhdGEtcG9wdXAnICkgPT0gJ2xpZ2h0Ym94JyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSAkKCB0aGlzICkucGFyZW50KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50QmcgPSBwYXJlbnQuY3NzKCAnYmFja2dyb3VuZC1pbWFnZScgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9saWdodEJveFBvcHVwLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kLWltYWdlJzogcGFyZW50QmdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgX3dyYXAub24oIHtcbiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oIGUgKXtcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICBfb2JqLm9uKCB7XG4gICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIF9oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICBfYnRuQ2xvc2Uub24oIHtcbiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgX2hpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3Nob3cgPSBmdW5jdGlvbiggY2xhc3NOYW1lICl7XG4gICAgICAgICAgICBfc2V0UG9wdXBDb250ZW50KCBjbGFzc05hbWUgKTtcblxuICAgICAgICAgICAgX3Njcm9sbENvbnRlaW5lci5jc3MoIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdoaWRkZW4nLFxuICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodDogX2dldFNjcm9sbFdpZHRoKClcbiAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdwb3B1cF9vcGVuZWQnICk7XG4gICAgICAgICAgICBfY2VudGVyV3JhcCgpO1xuXG4gICAgICAgIH0sXG4gICAgICAgIF9zZXRQb3B1cENvbnRlbnQgPSBmdW5jdGlvbiggY2xhc3NOYW1lICl7XG4gICAgICAgICAgICB2YXIgY3VyQ29udGVudCA9IF9jb250ZW50cy5maWx0ZXIoICcucG9wdXBfXycgKyBjbGFzc05hbWUgKTtcblxuICAgICAgICAgICAgX2NvbnRlbnRzLmNzcyggeyBkaXNwbGF5OiAnbm9uZScgfSApO1xuICAgICAgICAgICAgY3VyQ29udGVudC5jc3MoIHsgZGlzcGxheTogJ2Jsb2NrJyB9ICk7XG4gICAgICAgIH07XG5cbiAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXG5cbiAgICAvL3B1YmxpYyBtZXRob2RzXG5cbiAgICBfc2VsZi5zaG93ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cbiAgICAgICAgZWxlbS5vbigge1xuICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9zaG93KCAkKCB0aGlzICkuYXR0ciggJ2RhdGEtcG9wdXAnICkgKTtcblxuICAgICAgICAgICAgICAgIGlmKCAkKCB0aGlzICkuYXR0ciggJ2RhdGEtcG9wdXAnICkgPT0gJ2xpZ2h0Ym94JyApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9ICQoIHRoaXMgKS5wYXJlbnQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudEJnID0gcGFyZW50LmNzcyggJ2JhY2tncm91bmQtaW1hZ2UnICk7XG4gICAgICAgICAgICAgICAgICAgIF9saWdodEJveFBvcHVwLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtaW1hZ2UnOiBwYXJlbnRCZ1xuICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9ICk7XG5cbiAgICB9O1xuXG5cbiAgICBfaW5pdCgpO1xufTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
