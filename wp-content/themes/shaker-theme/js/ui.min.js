!function(){$(function(){$(".popup").each(function(){new Popup($(this))})})}();var Popup=function(o){var n=this,t=40,i=$(".popup__open"),p=o,e=p.find(".popup__lightbox"),c=p.find(".popup__close, .popup__cancel"),u=p.find(".popup__wrap"),s=p.find(".popup__content"),a=$("html"),d=$(window),r=setTimeout(function(){},1),f=function(){d.height()-2*t-u.height()>0?u.css({top:(d.height()-2*t-u.height())/2}):u.css({top:0})},h=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},l=function(){p.css({overflowY:"hidden"}),a.css({overflowY:"auto",paddingRight:0}),p.removeClass("popup_opened"),p.addClass("popup_hide"),r=setTimeout(function(){p.css({overflowY:"auto"}),p.removeClass("popup_hide")},300)},g=function(){p[0].obj=n,_()},_=function(){d.on({resize:function(){f()}}),i.on({click:function(){if(m($(this).attr("data-popup")),"lightbox"==$(this).attr("data-popup")){var o=$(this).parent(),n=o.css("background-image");e.css({"background-image":n})}return!1}}),u.on({click:function(o){o.stopPropagation()}}),p.on({click:function(){return l(),!1}}),c.on({click:function(){return l(),!1}})},m=function(o){v(o),a.css({overflowY:"hidden",paddingRight:h()}),p.addClass("popup_opened"),f()},v=function(o){var n=s.filter(".popup__"+o);s.css({display:"none"}),n.css({display:"block"})};n.show=function(o){o.on({click:function(){if(m($(this).attr("data-popup")),"lightbox"==$(this).attr("data-popup")){var o=$(this).parent(),n=o.css("background-image");e.css({"background-image":n})}return!1}})},g()};
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,i,n=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),d=$('<span class="websters-select__item"></span>'),p=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(p),p=o.parent(),p.append('<div class="websters-select__arrow"></div>'),o.before(d),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),d.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),p.removeClass("websters-select_opened")},b=function(){o[0].obj=n,h(),g(),w()},w=function(){o.on("change",function(){d.text($(this).find("option:selected").text())}),1!=s||l||(p.on({click:function(e){e.stopPropagation(),u?v():m()}}),r.on({click:function(){u&&v()}}))},g=function(){!s||l?y():1==s&&_()},_=function(){p.addClass("websters-select_custom")},y=function(){p.addClass("websters-select_mobile")},m=function(){var e=$("select"),n=$("<ul></ul>"),s=(r.scrollTop(),p.offset()),l=0,d=o.find("option:selected").index(),h=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+h+'"></div>'),o.find("option").each(function(e){var t=$(this);e==d?n.append('<li class="active">'+t.text()+"</li>"):n.append("<li>"+t.text()+"</li>")}),t.append(n),f.append(t),p.addClass("websters-select_opened"),t.css({width:p.outerWidth(),left:s.left,top:s.top+p.outerHeight()}),l=t.outerHeight(),l>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),i=t.niceScroll({horizrailenabled:!1})),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};n.checkOpened=function(){return u},n.close=function(){v()},b()}}();
//# sourceMappingURL=data:application/json;base64,
